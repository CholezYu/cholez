import{_ as t,c as e,o,a4 as a}from"./chunks/framework.B5RDkS33.js";const u=JSON.parse('{"title":"为什么学习算法？","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/index.md","filePath":"algorithm/index.md","lastUpdated":1717252380000}'),r={name:"algorithm/index.md"},i=a('<h1 id="为什么学习算法" tabindex="-1">为什么学习算法？ <a class="header-anchor" href="#为什么学习算法" aria-label="Permalink to &quot;为什么学习算法？&quot;">​</a></h1><p>其实在工作中，几乎没有用到什么算法，为什么还是有很多企业在前端招聘中要求会算法呢？前端到底要不要学习算法呢？也许是作为面试的筛选条件，也许是我还没有接触到需要算法的场景。</p><p>经过半个月的学习，算法也没有想象中的那么难，也不像有些人说的那样 “算法对前端没用”。还是有一些收获的，最大的感悟就是，算法好像就是在阻止我们使用一些 <strong>很好用</strong> 的 API，而我们需要使用最基础的程序结构去实现与这些 API 一样的效果，并且要让程序的计算次数更少。</p><p>而且数据结构与算法在前端的应用并不少，只是我们平常容易忽略。我们经常使用的框架，例如 Vue、React，或者一些第三方库，都有很多的应用场景。</p><p>所以，长远来看，前端还是应该学习算法的，至少对我来说是有这个必要的。</p><h2 id="数据结构与算法在前端的应用" tabindex="-1">数据结构与算法在前端的应用 <a class="header-anchor" href="#数据结构与算法在前端的应用" aria-label="Permalink to &quot;数据结构与算法在前端的应用&quot;">​</a></h2><ul><li><p><strong>队列</strong>：JS 任务队列，取消重复请求是用队列存储最近的请求。</p></li><li><p><strong>栈</strong>：JS 执行上下文栈、Nodejs 中间件（洋葱模型）。</p></li><li><p><strong>树</strong>：DOM 树、AST 树、Vue 和 React 的 <code>Virtual DOM</code> 树。</p></li><li><p><strong>哈希表</strong>：快速查找和数据去重，但是前端基本都用数组，可能在操作数据库的场景更多一点。</p></li><li><p><code>Virtual DOM</code> 的更新使用了 <strong>diff 算法</strong>，<code>KeepAlive</code> 使用了 <strong>LRU 算法</strong>。</p></li><li><p>Vue3 使用<strong>最长递增子序列</strong>对 diff 算法进行了优化。</p></li></ul><p>当然，这些只是冰山一角，还有更多的场景需要我去发现与探索。</p>',8),n=[i];function s(l,p,d,c,_,g){return o(),e("div",null,n)}const f=t(r,[["render",s]]);export{u as __pageData,f as default};
